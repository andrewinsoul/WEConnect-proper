{"version":3,"sources":["../../src/controllers/userHandler.js"],"names":["load","User","key","process","env","JWT_SECRET_KEY","userHandler","createUser","req","res","encodedPassword","hashSync","body","password1","create","name","email","password","username","then","user","myToken","sign","id","expiresIn","status","send","auth","token","catch","error","errors","message","includes","loginUser","findOne","where","isPasswordValid","compareSync","msg"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA,iBAAOA,IAAP;;IAEQC,I,aAAAA,I;;AACR,IAAMC,MAAMC,QAAQC,GAAR,CAAYC,cAAxB;;AAEO,IAAMC,oCAAc;AACzBC,YADyB,sBACdC,GADc,EACTC,GADS,EACJ;AACnB,QAAMC,kBAAkB,mBAAOC,QAAP,CAAgBH,IAAII,IAAJ,CAASC,SAAzB,EAAoC,CAApC,CAAxB;AACA,WAAOZ,KACJa,MADI,CACG;AACNC,YAAMP,IAAII,IAAJ,CAASG,IADT;AAENC,aAAOR,IAAII,IAAJ,CAASI,KAFV;AAGNC,gBAAUP,eAHJ;AAINQ,gBAAUV,IAAII,IAAJ,CAASM;AAJb,KADH,EAOJC,IAPI,CAOC,UAACC,IAAD,EAAU;AACd,UAAMC,UAAU,uBAAIC,IAAJ,CACd;AACEC,YAAIH,KAAKG;AADX,OADc,EAIdrB,GAJc,EAKd;AACEsB,mBAAW;AADb,OALc,CAAhB;AASA,aAAOf,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,IAAR,EAAcC,OAAOP,OAArB,EAArB,CAAP;AACD,KAlBI,EAmBJQ,KAnBI,CAmBE,UAACC,KAAD,EAAW;AAChB,UAAIA,MAAMf,IAAN,KAAe,gCAAnB,EAAqD;AACnD,YAAIe,MAAMC,MAAN,CAAa,CAAb,EAAgBC,OAAhB,CAAwBC,QAAxB,CAAiC,UAAjC,CAAJ,EAAkD,OAAOxB,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEI,OAAO,wBAAT,EAArB,CAAP;AAClD,eAAOrB,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEI,OAAO,sBAAT,EAArB,CAAP;AACD;AACF,KAxBI,CAAP;AAyBD,GA5BwB;AA8BzBI,WA9ByB,qBA8Bf1B,GA9Be,EA8BVC,GA9BU,EA8BL;AAClB,WAAOR,KACJkC,OADI,CACI;AACPC,aAAO;AACLpB,eAAOR,IAAII,IAAJ,CAASI;AADX;AADA,KADJ,EAMJG,IANI,CAMC,UAACC,IAAD,EAAU;AACd,UAAI,CAACA,IAAL,EAAW,OAAOX,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEI,OAAO,uCAAT,EAArB,CAAP;AACX,UAAMO,kBAAkB,mBAAOC,WAAP,CAAmB9B,IAAII,IAAJ,CAASK,QAA5B,EAAsCG,KAAKH,QAA3C,CAAxB;AACA,UAAI,CAACoB,eAAL,EAAsB,OAAO5B,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAeC,OAAO,IAAtB,EAA4BW,KAAK,oBAAjC,EAArB,CAAP;AACtB,UAAMlB,UAAU,uBAAIC,IAAJ,CACd;AACEC,YAAIH,KAAKG;AADX,OADc,EAIdrB,GAJc,EAKd;AACEsB,mBAAW;AADb,OALc,CAAhB;AASA,aAAOf,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,IAAR,EAAcC,OAAOP,OAArB,EAArB,CAAP;AACD,KApBI,CAAP;AAqBA;AACD;AArDwB,CAApB","file":"userHandler.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport bcrypt from 'bcryptjs';\r\nimport dotenv from 'dotenv';\r\nimport { db } from '../models/index';\r\n\r\ndotenv.load();\r\n\r\nconst { User } = db;\r\nconst key = process.env.JWT_SECRET_KEY;\r\n\r\nexport const userHandler = {\r\n  createUser(req, res) {\r\n    const encodedPassword = bcrypt.hashSync(req.body.password1, 8);\r\n    return User\r\n      .create({\r\n        name: req.body.name,\r\n        email: req.body.email,\r\n        password: encodedPassword,\r\n        username: req.body.username,\r\n      })\r\n      .then((user) => {\r\n        const myToken = jwt.sign(\r\n          {\r\n            id: user.id,\r\n          },\r\n          key,\r\n          {\r\n            expiresIn: 86400,\r\n          },\r\n        );\r\n        return res.status(201).send({ auth: true, token: myToken });\r\n      })\r\n      .catch((error) => {\r\n        if (error.name === \"SequelizeUniqueConstraintError\") {\r\n          if (error.errors[0].message.includes('username')) return res.status(409).send({ error: 'username already taken' });\r\n          return res.status(409).send({ error: 'email already exists' });\r\n        }\r\n      });\r\n  },\r\n\r\n  loginUser(req, res) {\r\n    return User\r\n      .findOne({\r\n        where: {\r\n          email: req.body.email,\r\n        },\r\n      })\r\n      .then((user) => {\r\n        if (!user) return res.status(401).send({ error: 'Authentication failed, user not found' });\r\n        const isPasswordValid = bcrypt.compareSync(req.body.password, user.password);\r\n        if (!isPasswordValid) return res.status(401).send({ auth: false, token: null, msg: 'incorrect password' });\r\n        const myToken = jwt.sign(\r\n          {\r\n            id: user.id,\r\n          },\r\n          key,\r\n          {\r\n            expiresIn: 86400,\r\n          },\r\n        );\r\n        return res.status(200).send({ auth: true, token: myToken });\r\n      });\r\n    // .catch(error => res.status(500).send({ error }));\r\n  },\r\n};\r\n"]}