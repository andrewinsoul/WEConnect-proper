{"version":3,"sources":["../../src/controllers/businessHandler.js"],"names":["Business","User","capitalize","word","formattedWord","i","length","toUpperCase","businessHandler","createBusiness","req","res","create","name","body","address","location","category","profile","userId","then","status","send","result","catch","error","parent","detail","includes","deleteBusiness","destroy","where","id","params","deletedBusiness","msg","getOneBusiness","findOne","include","model","resultObject","Object","assign","user","email","getAllBusinesses","next","keys","query","findAll","map","business","getBusinessesByLocation","getBusinessesByCategory","updateBusinessProfile","update"],"mappings":"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","file":"businessHandler.js","sourcesContent":["import { db } from '../models/index';\r\n\r\nconst { Business, User } = db;\r\n/**\r\n * @param {string} word\r\n * @returns {string}\r\n */\r\nfunction capitalize(word) {\r\n  let formattedWord = '';\r\n  for (let i = 0; i < word.length; i++) {\r\n    if (i === 0) {\r\n      formattedWord += word[i].toUpperCase();\r\n      continue;\r\n    }\r\n    formattedWord += word[i];\r\n  }\r\n  return formattedWord;\r\n}\r\nexport const businessHandler = {\r\n  createBusiness(req, res) {\r\n    return Business\r\n      .create({\r\n        name: req.body.name,\r\n        address: req.body.address,\r\n        // businessPhoto: req.body.picture,\r\n        location: req.body.location,\r\n        category: req.body.category,\r\n        profile: req.body.profile,\r\n        userId: req.body.userId,\r\n      })\r\n      .then(result => res.status(201).send(result))\r\n      .catch((error) => {\r\n        if (error.name === 'SequelizeForeignKeyConstraintError') return res.status(404).send({ error: 'User not found' });\r\n        if (error.parent.detail.includes('name')) return res.status(409).send({ error: 'business name already exists' });\r\n        if (error.parent.detail.includes('profile')) return res.status(409).send({ error: 'business profile already exists' });\r\n      });\r\n  },\r\n\r\n  deleteBusiness(req, res) {\r\n    return Business\r\n      .destroy({\r\n        where: {\r\n          id: req.params.id,\r\n        },\r\n      })\r\n      .then((deletedBusiness) => {\r\n        if (deletedBusiness) return res.status(200).send({ msg: 'Business successfully deleted' });\r\n        return res.status(404).send({ error: 'business not found' });\r\n      });\r\n    // .catch(error => res.status(500).send({ error }));\r\n  },\r\n\r\n  getOneBusiness(req, res) {\r\n    return Business\r\n      .findOne({\r\n        include: [\r\n          {\r\n            model: User,\r\n          },\r\n        ],\r\n        where: {\r\n          id: req.params.id,\r\n        },\r\n      })\r\n      .then((result) => {\r\n        if (result) {\r\n          const resultObject = Object.assign(\r\n            {},\r\n            {\r\n              name: result.name,\r\n              address: result.address,\r\n              location: result.location,\r\n              category: result.category,\r\n              profile: result.profile,\r\n              user: {\r\n                name: result.User.name,\r\n                email: result.User.email,\r\n              },\r\n            },\r\n          );\r\n          return res.status(200).send({ msg: resultObject });\r\n        }\r\n        return res.status(404).send({ error: 'business not found' });\r\n      });\r\n    // .catch(error => res.status(500).send({ error }));\r\n  },\r\n\r\n  getAllBusinesses(req, res, next) {\r\n    if (Object.keys(req.query).length) return next();\r\n    return Business\r\n      .findAll({\r\n        include: [\r\n          {\r\n            model: User,\r\n          },\r\n        ],\r\n      })\r\n      .then((result) => {\r\n        const resultObject = result.map((business) => {\r\n          return Object.assign(\r\n            {},\r\n            {\r\n              name: business.name,\r\n              address: business.address,\r\n              location: business.location,\r\n              category: business.category,\r\n              profile: business.profile,\r\n              user: {\r\n                name: business.User.name,\r\n                email: business.User.email,\r\n              },\r\n            },\r\n          );\r\n        });\r\n        return res.status(200).send({ msg: resultObject });\r\n      });\r\n    // .catch(error => res.status(500).send({ error }));\r\n  },\r\n\r\n  getBusinessesByLocation(req, res) {\r\n    if (Object.keys(req.query).includes('location')) {\r\n      return Business\r\n        .findAll({\r\n          where: {\r\n            location: capitalize(req.query.location),\r\n          },\r\n        })\r\n        .then((result) => {\r\n          if (result.length) return res.status(200).send({ msg: result });\r\n          if (!result.length) return res.status(404).send({ error: 'business with location not found' });\r\n        });\r\n      // .catch(error => res.status(500).send({ error }));\r\n    }\r\n    return res.status(400).send({ error: 'Bad Request' });\r\n  },\r\n\r\n  getBusinessesByCategory(req, res, next) {\r\n    if (!Object.keys(req.query).includes('category')) return next();\r\n    return Business\r\n      .findAll({\r\n        where: {\r\n          category: capitalize(req.query.category),\r\n        },\r\n      })\r\n      .then((result) => {\r\n        if (result.length) return res.status(200).send({ msg: result });\r\n        if (!result.length) return res.status(404).send({ error: 'business with category not found' });\r\n      });\r\n    // .catch(error => res.status(500).send({ error }));\r\n  },\r\n\r\n  updateBusinessProfile(req, res) {\r\n    return Business\r\n      .update(\r\n        {\r\n          profile: req.body.profile,\r\n        },\r\n        {\r\n          where: {\r\n            id: req.params.id,\r\n          },\r\n        },\r\n      )\r\n      .then((result) => {\r\n        if (result[0]) return res.status(200).send({ msg: 'profile succesfully updated' });\r\n        return res.status(404).send({ error: 'business not found' });\r\n      });\r\n    // .catch(error => res.status(500).send({ error }));\r\n  },\r\n};\r\n"]}