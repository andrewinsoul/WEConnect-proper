{"version":3,"sources":["../../src/models/index.js"],"names":["basename","__filename","env","process","NODE_ENV","console","log","configEnv","db","sequelize","use_env_variable","database","username","password","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","import","join","name","Object","keys","modelName","associate","Sequelize"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA;;AAEA,IAAMA,WAAW,eAAKA,QAAL,CAAcC,UAAd,CAAjB;AACA,IAAMC,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACAC,QAAQC,GAAR,CAAYJ,GAAZ;AACA,IAAMK,YAAY,iBAASL,GAAT,CAAlB;AACO,IAAMM,kBAAK,EAAX;;AAEP,IAAIC,kBAAJ;AACA,IAAIF,UAAUG,gBAAd,EAAgC;AAC9BD,cAAY,wBAAcF,UAAUG,gBAAxB,CAAZ;AACD,CAFD,MAGK;AACHD,cAAY,wBAAcF,UAAUI,QAAxB,EAAkCJ,UAAUK,QAA5C,EAAsDL,UAAUM,QAAhE,EAA0EN,SAA1E,CAAZ;AACD;AACD,aACGO,WADH,CACeC,SADf,EAEGC,MAFH,CAEU;AAAA,SAASC,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAASjB,QAAvC,IAAqDiB,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAAhF;AAAA,CAFV,EAGGC,OAHH,CAGW,UAACH,IAAD,EAAU;AACjB,MAAMI,QAAQZ,UAAUa,MAAV,CAAiB,eAAKC,IAAL,CAAUR,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAT,KAAGa,MAAMG,IAAT,IAAiBH,KAAjB;AACD,CANH;;AAQAI,OAAOC,IAAP,CAAYlB,EAAZ,EAAgBY,OAAhB,CAAwB,UAACO,SAAD,EAAe;AACrC,MAAInB,GAAGmB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BpB,OAAGmB,SAAH,EAAcC,SAAd,CAAwBpB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGqB,SAAH","file":"index.js","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport Sequelize from 'sequelize';\r\nimport { config } from 'dotenv';\r\nimport dbConfig from '../config/config';\r\n\r\nconfig();\r\n\r\nconst basename = path.basename(__filename);\r\nconst env = process.env.NODE_ENV || 'development';\r\nconsole.log(env);\r\nconst configEnv = dbConfig[env];\r\nexport const db = {};\r\n\r\nlet sequelize;\r\nif (configEnv.use_env_variable) {\r\n  sequelize = new Sequelize(configEnv.use_env_variable);\r\n}\r\nelse {\r\n  sequelize = new Sequelize(configEnv.database, configEnv.username, configEnv.password, configEnv);\r\n}\r\nfs\r\n  .readdirSync(__dirname)\r\n  .filter(file => (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js'))\r\n  .forEach((file) => {\r\n    const model = sequelize.import(path.join(__dirname, file));\r\n    db[model.name] = model;\r\n  });\r\n\r\nObject.keys(db).forEach((modelName) => {\r\n  if (db[modelName].associate) {\r\n    db[modelName].associate(db);\r\n  }\r\n});\r\n\r\ndb.sequelize = sequelize;\r\ndb.Sequelize = Sequelize;\r\n"]}