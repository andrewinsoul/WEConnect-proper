{"version":3,"sources":["../../src/middlewares/middleware.js"],"names":["load","key","process","env","JWT_SECRET_KEY","appMiddlewares","req","res","next","myToken","headers","query","token","body","status","send","auth","error","verify","err","decoded","userId","id","password1","password2"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA,iBAAOA,IAAP;AACA,IAAMC,MAAMC,QAAQC,GAAR,CAAYC,cAAxB;AACA;;;;IAGaC,c,WAAAA,c;;;;;;;;AACX;;;;;;;gCAOmBC,G,EAAKC,G,EAAKC,I,EAAM;AACjC,UAAMC,UAAUH,IAAII,OAAJ,CAAY,gBAAZ,KAAiCJ,IAAIK,KAAJ,CAAUC,KAA3C,IAAoDN,IAAIO,IAAJ,CAASD,KAA7E;AACA,UAAI,CAACH,OAAL,EAAc,OAAOF,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAeC,OAAO,mBAAtB,EAArB,CAAP;AACd,6BAAIC,MAAJ,CACET,OADF,EAEER,GAFF,EAEO,UAACkB,GAAD,EAAMC,OAAN,EAAkB;AACrB,YAAID,GAAJ,EAAS,OAAOZ,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,MAAM,KAAR,EAAeC,OAAO,8BAAtB,EAArB,CAAP;AACTX,YAAIe,MAAJ,GAAaD,QAAQE,EAArB;AACAd;AACD,OANH;AAQD;;AAED;;;;;;;;;;sCAOyBF,G,EAAKC,G,EAAKC,I,EAAM;AACvC,UAAIF,IAAIO,IAAJ,CAASU,SAAT,KAAuBjB,IAAIO,IAAJ,CAASW,SAApC,EAA+C,OAAOjB,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEE,OAAO,mBAAT,EAArB,CAAP;AAC/C,aAAOT,MAAP;AACD","file":"middleware.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.load();\r\nconst key = process.env.JWT_SECRET_KEY;\r\n/**\r\n * @class appMiddlewares\r\n */\r\nexport class appMiddlewares {\r\n  /**\r\n   *\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @param {Function} next\r\n   * @returns {JSON}\r\n   */\r\n  static verifyToken(req, res, next) {\r\n    const myToken = req.headers['x-access-token'] || req.query.token || req.body.token;\r\n    if (!myToken) return res.status(403).send({ auth: false, error: 'No token provided' });\r\n    jwt.verify(\r\n      myToken,\r\n      key, (err, decoded) => {\r\n        if (err) return res.status(401).send({ auth: false, error: 'Failed to authenticate token' });\r\n        req.userId = decoded.id;\r\n        next();\r\n      },\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} req\r\n   * @param {object} res\r\n   * @param {Function} next\r\n   * @returns {JSON}\r\n   */\r\n  static addUserMiddleware(req, res, next) {\r\n    if (req.body.password1 !== req.body.password2) return res.status(409).send({ error: 'password mismatch' });\r\n    return next();\r\n  }\r\n}\r\n"]}